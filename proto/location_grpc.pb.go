// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/location.proto

package locationpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LocationTracker_StoreLocation_FullMethodName     = "/locationpb.LocationTracker/StoreLocation"
	LocationTracker_CalculateDistance_FullMethodName = "/locationpb.LocationTracker/CalculateDistance"
)

// LocationTrackerClient is the client API for LocationTracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPC сервис
type LocationTrackerClient interface {
	StoreLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Result, error)
	CalculateDistance(ctx context.Context, in *DistanceRequest, opts ...grpc.CallOption) (*DistanceResponse, error)
}

type locationTrackerClient struct {
	cc grpc.ClientConnInterface
}

func NewLocationTrackerClient(cc grpc.ClientConnInterface) LocationTrackerClient {
	return &locationTrackerClient{cc}
}

func (c *locationTrackerClient) StoreLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, LocationTracker_StoreLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationTrackerClient) CalculateDistance(ctx context.Context, in *DistanceRequest, opts ...grpc.CallOption) (*DistanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DistanceResponse)
	err := c.cc.Invoke(ctx, LocationTracker_CalculateDistance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocationTrackerServer is the server API for LocationTracker service.
// All implementations must embed UnimplementedLocationTrackerServer
// for forward compatibility.
//
// gRPC сервис
type LocationTrackerServer interface {
	StoreLocation(context.Context, *Location) (*Result, error)
	CalculateDistance(context.Context, *DistanceRequest) (*DistanceResponse, error)
	mustEmbedUnimplementedLocationTrackerServer()
}

// UnimplementedLocationTrackerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLocationTrackerServer struct{}

func (UnimplementedLocationTrackerServer) StoreLocation(context.Context, *Location) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreLocation not implemented")
}
func (UnimplementedLocationTrackerServer) CalculateDistance(context.Context, *DistanceRequest) (*DistanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateDistance not implemented")
}
func (UnimplementedLocationTrackerServer) mustEmbedUnimplementedLocationTrackerServer() {}
func (UnimplementedLocationTrackerServer) testEmbeddedByValue()                         {}

// UnsafeLocationTrackerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocationTrackerServer will
// result in compilation errors.
type UnsafeLocationTrackerServer interface {
	mustEmbedUnimplementedLocationTrackerServer()
}

func RegisterLocationTrackerServer(s grpc.ServiceRegistrar, srv LocationTrackerServer) {
	// If the following call pancis, it indicates UnimplementedLocationTrackerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LocationTracker_ServiceDesc, srv)
}

func _LocationTracker_StoreLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationTrackerServer).StoreLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationTracker_StoreLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationTrackerServer).StoreLocation(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationTracker_CalculateDistance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationTrackerServer).CalculateDistance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationTracker_CalculateDistance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationTrackerServer).CalculateDistance(ctx, req.(*DistanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocationTracker_ServiceDesc is the grpc.ServiceDesc for LocationTracker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocationTracker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "locationpb.LocationTracker",
	HandlerType: (*LocationTrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreLocation",
			Handler:    _LocationTracker_StoreLocation_Handler,
		},
		{
			MethodName: "CalculateDistance",
			Handler:    _LocationTracker_CalculateDistance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/location.proto",
}
